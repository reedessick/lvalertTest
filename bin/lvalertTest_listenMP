#!/usr/bin/python
usage       = "lvalertTest_listenMP [--options]"
description = "a script that monitors a fakeDB_directory for new lvalert messages and destributes forks processes like lvalert_listenMP would"
author      = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import multiprocessing as mp

from lvalertMP.lvalert import interactiveQueue as iQ
from ligoTest.lvalert import lvalertTestUtils as lvutils

import time

from ConfigParser import SafeConfigParser

from optparse import OptionParser

#-------------------------------------------------

def fork( (foo, args) ):

    conn1, conn2 = mp.Pipe()
    args.insert( 0, conn2 ) ### connection must be the first argument!

    proc = mp.Process(target=foo, args=args ) ### define the function based on the config file?
    proc.start()
    conn2.close() ### only the child should be able to communicate through conn2, so we close it here

    return proc, conn1

#-------------------------------------------------

parser = OptionParser(usage=usage, description=description)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('-f', '--fakeDB-dir', default=None, type='string', help='the directory which FakeDb is managing')
parser.add_option('-C', '--command-filename', default=[], action='append', type='string', help='the file into which lvalert commands must be written')

parser.add_option('-c', "--config_file", default=None, type='string', help='config file with list of actions')

parser.add_option('--cadence', default=0.1, type='float', help='how often we check lvalert.out for new messages')

opts, args = parser.parse_args()

trackThese = []
if opts.fakeDB_dir!=None:
    lvalertSrc = os.path.join(opts.fakeDB_dir, 'lvalert.out')
    if not os.path.exists(lvalertSrc):
        raise ValueError('could not find lvalert.out file corresponding to --fakeDB-dir : %s'%lvalertSrc)
    trackThese.append(lvalertSrc)

if opts.command_filename:
    for filename in opts.command_filename:
        if not os.path.exists(filename):
            raise ValueError('could not find --command-filename=%s'%filename)
        trackThese.append(filename)

#-------------------------------------------------

node2proc = dict()
if opts.config_file:
    if opts.verbose:
        print "reading config : %s"%opts.config_file
    config = SafeConfigParser()
    config.read(opts.config_file)

    if opts.verbose:
        print "launching child processes"
    for mp_child_name in config.sections():
        childConfig = config.get(mp_child_name, "childConfig")

        if config.has_option(mp_child_name, "verbose"):
            verbose = config.getboolean(mp_child_name, "verbose")
        else:
            verbose = False
        if config.has_option(mp_child_name, "sleep"):
            sleep = config.getfloat(mp_child_name, "sleep")
        else:
            sleep = 0.1

        ### parameters about garbage collection
        if config.has_option(mp_child_name, "maxComplete"):
            maxComplete = config.getint(mp_child_name, "maxComplete")
        else:
            maxComplete = 100
        if config.has_option(mp_child_name, "maxFrac"):
            maxFrac = config.getfloat(mp_child_name, "maxFrac")
        else:
            maxFrac = 0.5

        ### parameters about warnings
        if config.has_option(mp_child_name, "warnThr"):
            warnThr = config.getfloat(mp_child_name, "warnThr")
        else:
            warnThr = 1e3
        if config.has_option(mp_child_name, "recipients"):
            recipients = config.get(mp_child_name, "recipients").split()
        else:
            recipients = []
        if config.has_option(mp_child_name, "warnDelay"):
            warnDelay = config.getfloat(mp_child_name, "warnDelay")
        else:
            warnDelay = 3600
        if config.has_option(mp_child_name, "maxWarn"):
            maxWarn = config.getint(mp_child_name, "maxWarn")
        else:
            maxWarn = 24

        ### fork the process
        proc, conn = fork( (iQ.interactiveQueue, [childConfig, verbose, sleep, maxComplete, maxFrac, warnThr, recipients, warnDelay, maxWarn]) )

        ### fill in node2proc
        for node in config.get(mp_child_name, "nodes").split(): ### iterate over nodes and add them to this process
            if node2proc.has_key(node):
                raise ValueError("node=%s assigned to more than one child process!" % (node))
            else:
                node2proc[node] = (proc, conn, mp_child_name)

#-------------------------------------------------

if opts.verbose:
    print "monitoring : %s"%(", ".join(trackThese))
    print "  cadence  : %.3f"%opts.cadence

buf = lvutils.LVAlertBuffer( trackThese )
buf.monitor( lvutils.alert2interactiveQueue, 
             cadence   = opts.cadence, 
             node2proc = node2proc, 
             verbose   = opts.verbose,
           )
